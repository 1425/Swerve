// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2471.Swerve.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2471.Swerve.Robot;
import com.sun.squawk.util.MathUtils;
import org.usfirst.frc2471.Swerve.RobotMap;
/**
 *
 */
public class  DriveLoop extends Command {
    public DriveLoop() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(RobotMap.swerve);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double x =  Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kX);
        double y = -Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kY);  // odd, but up is negative
        double z =  Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kZ);

        RobotMap.swerve.drive(x,y,z);

//        double twist = Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kTwist);
//        double throttle =  Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kThrottle);
//        double numAxis =  Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kNumAxis);
        
        //System.out.println("X="+x+" Y="+y+" Z="+z+" Twist="+twist+" Throttle="+throttle+" NumAxis="+numAxis);
        

/*        
        double power;
        
        if (Robot.oi.getJoystick1().getButton(Joystick.ButtonType.kTop))
        {
            // carlo mode
            
            power = -magnitude;

            double delta = Robot.swerveModule.getTwist() - heading;
            if (delta > Math.PI) {
                delta = delta - 2.0*Math.PI;
            }
            else if (delta < -Math.PI) {
                delta = delta + 2.0*Math.PI;
            }

            if (delta>Math.PI/2.0)
            {
                delta = delta - Math.PI;
                power = -power;
            }
            else if (delta<-Math.PI/2.0)
            {
                delta = delta + Math.PI;
                power = -power;
            }

            heading = Robot.swerveModule.getTwist() - delta;
            if (heading > Math.PI)
                heading = heading - 2.0*Math.PI;
            else if (heading < -Math.PI)
                heading = heading + 2.0*Math.PI;
        }
        else
            power = -throttle;
*/
//        System.out.println("Heading: " + heading + " (x,y): (" + x + "," + y +")" );
        

        
    System.out.println("RF: " + RobotMap.rightFrontSwerve.getTwist() );
    System.out.println("LF: " + RobotMap.leftFrontSwerve.getTwist() );
    System.out.println("RR: " + RobotMap.rightRearSwerve.getTwist() );
    System.out.println("LR: " + RobotMap.leftRearSwerve.getTwist() );

//        RoLbot.swerveModule.setTwist(heading);
//        Robot.swerveModule.setSpeed(power);
        
        //System.out.println("Twist="+Robot.swerveModule.getTwist());
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
