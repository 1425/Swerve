// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2471.Swerve.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2471.Swerve.Robot;
import com.sun.squawk.util.MathUtils;
import edu.wpi.first.wpilibj.ADXL345_I2C;
import org.usfirst.frc2471.Swerve.RobotMap;
/**
 *
 */
public class  DriveLoop extends Command {
    public DriveLoop() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(RobotMap.swerve);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double x =  Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kX);
        double y = -Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kY);  // odd, but up is negative
        double z =  Robot.oi.getJoystick1().getAxis(Joystick.AxisType.kZ);
        double gyroAngle = RobotMap.gyro.getAngle();
        double accelX = RobotMap.accel.getAcceleration(ADXL345_I2C.Axes.kX);
        double accelY = RobotMap.accel.getAcceleration(ADXL345_I2C.Axes.kY);
        double accelZ = RobotMap.accel.getAcceleration(ADXL345_I2C.Axes.kZ);
        
        RobotMap.swerve.drive(x,y,z,gyroAngle,accelX,accelY);

System.out.println( "AccelX: " + accelX + " AccelY: " + accelY + " AccelZ: " + accelZ);
//        System.out.println("RF: " + RobotMap.rightFrontSwerve.getTwist() );
//        System.out.println("LF: " + RobotMap.leftFrontSwerve.getTwist() );
//        System.out.println("RR: " + RobotMap.rightRearSwerve.getTwist() );
//        System.out.println("LR: " + RobotMap.leftRearSwerve.getTwist() );
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
